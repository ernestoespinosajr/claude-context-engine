# Puppeteer MCP Configuration
# Browser automation and UI testing

name: "Puppeteer"
description: "Browser automation and web interaction capabilities"
command: "npx"
args: ["-y", "@modelcontextprotocol/server-puppeteer"]

capabilities:
  - browser_automation
  - ui_testing
  - screenshot_capture
  - form_interaction
  - navigation_testing
  - performance_testing
  - accessibility_testing
  - visual_regression_testing

features:
  testing_types:
    functional: "User interaction testing"
    visual: "Screenshot comparison testing"
    performance: "Page load and interaction timing"
    accessibility: "A11y compliance testing"
    
  automation_scope:
    single_page: "Individual page testing"
    user_flows: "Complete user journey testing"
    cross_browser: "Multi-browser compatibility"
    responsive: "Different screen sizes"
    
  reporting:
    screenshots: "Visual evidence of issues"
    performance_metrics: "Timing and resource usage"
    accessibility_report: "A11y compliance status"
    coverage_report: "Test coverage analysis"

flags:
  - "--mcp-puppeteer"
  - "--mpup"
  - "--ui-test"
  - "--browser-automation"

integration:
  auto_activation: true
  triggers:
    - ui_keywords: ["ui", "interface", "frontend", "testing"]
    - testing_context: "ui_validation_needed"
    - visual_verification: "required"
    
cache_strategy:
  duration: "session"  # Screenshots and test results
  screenshots: "temporary"  # Clean up after session
  
usage_patterns:
  ui_validation: "Verify user interface implementations"
  regression_testing: "Ensure UI changes don't break functionality"
  user_flow_testing: "Test complete user journeys"
  
test_scenarios:
  - form_submission
  - navigation_flows
  - responsive_behavior
  - error_handling
  - loading_states